# -*- coding: utf-8 -*-
"""scanningtool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14W5c6xH-UwgCVzk1E7lQfMY_3RZneyCy
"""

import socket
import subprocess
import re
import sys
import ssl
import requests

def scan_open_ports(target, ports=range(1, 1025)):
    print(f"Scanning {target} for open ports...")
    open_ports = []

    for port in ports:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(0.5)
            if s.connect_ex((target, port)) == 0:
                open_ports.append(port)
                print(f"Port {port} is open. Service: {get_service_name(port)}")

    if not open_ports:
        print("No open ports found.")

def get_service_name(port):
    try:
        return socket.getservbyport(port)
    except:
        return "Unknown"

def banner_grabbing(target, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            s.connect((target, port))
            s.send(b'HEAD / HTTP/1.1\r\n\r\n')
            banner = s.recv(1024).decode().strip()
            return banner if banner else "No banner detected"
    except Exception as e:
        return f"Error grabbing banner: {e}"

def check_outdated_software():
    print("Checking for outdated software...")
    try:
        result = subprocess.run(['pip', 'list', '--outdated'], capture_output=True, text=True)
        if result.stdout:
            print("Outdated software found:")
            print(result.stdout)
        else:
            print("No outdated software detected.")
    except Exception as e:
        print(f"Error checking outdated software: {e}")

def check_common_misconfigurations(target):
    print("Checking common misconfigurations...")
    try:
        response = requests.get(f"http://{target}")
        headers = response.headers
        security_headers = ["X-Frame-Options", "Content-Security-Policy", "Strict-Transport-Security"]
        for header in security_headers:
            if header in headers:
                print(f"{header} is present: {headers[header]}")
            else:
                print(f"{header} is missing.")
    except Exception as e:
        print(f"Error checking HTTP headers: {e}")

def check_ssl_certificate(target):
    print("Checking SSL certificate validity...")
    try:
        context = ssl.create_default_context()
        with socket.create_connection((target, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=target) as ssock:
                cert = ssock.getpeercert()
                print(f"SSL Certificate valid until: {cert['notAfter']}")
    except Exception as e:
        print(f"Error checking SSL certificate: {e}")

if __name__ == "__main__":
    target = input("Enter the target IP address or hostname to scan: ")
    scan_open_ports(target)
    for port in range(1, 1025):
        if socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex((target, port)) == 0:
            print(f"Banner for port {port}: {banner_grabbing(target, port)}")
    check_outdated_software()
    check_common_misconfigurations(target)
    check_ssl_certificate(target)